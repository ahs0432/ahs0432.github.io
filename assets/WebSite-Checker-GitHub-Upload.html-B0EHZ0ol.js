import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a as o}from"./app-85Z7QACv.js";const r={},a=o('<h2 id="github-repository" tabindex="-1"><a class="header-anchor" href="#github-repository"><span>GitHub Repository</span></a></h2><ul><li><a href="https://github.com/ahs0432/Chance-WC-Core" target="_blank" rel="noopener noreferrer">Core</a></li><li><a href="https://github.com/ahs0432/Chance-WC-Web-GoLang" target="_blank" rel="noopener noreferrer">Site</a></li></ul><h2 id="역할" tabindex="-1"><a class="header-anchor" href="#역할"><span>역할</span></a></h2><ul><li><p>Core</p><ul><li>Core의 역할은 crontab에 주기를 선택하여 등록하고 각 시점마다 실행되는 역할을 한다.</li><li>여기서 사용자의 설정을 인지하고 그 설정에 따라 사이트를 검사하는 사이클을 실행한다.</li><li>검사는 비동기로 실행되고 메일 수신자를 확인하여 알람 발생일 경우 메일로 발송한다.</li><li>검사 시간은 Timeout 10초 기준, 약 180개 사이트 검사 시 720초정도 소요됐었다.</li></ul></li><li><p>Site</p><ul><li>Core에서 검사된 데이터를 기반으로 웹 사이트를 표현해주는 역할을 수행하고 있다.</li><li>GoFiber 프레임워크를 기반으로 제작됐으나 나중에 REST API 형태로 변경할 생각이다.</li><li>변경한 이후에는 Vue.js 등 요즘 많이 사용하는 프론트엔드 언어로 제작해볼 생각이다.</li></ul></li></ul><h2 id="여담" tabindex="-1"><a class="header-anchor" href="#여담"><span>여담</span></a></h2><p>회사에서 쓰는 PHP로 개발된 Web Site Monitor를 대체할까 해서 개인적으로 개발했다.<br> 하지만 GoLang에 대한 유지 보수 등으로 인해 회사에서 채택되지 못해서 배포하게 됐다.</p><p>연습 용도이기도 하고 GoLang을 배우는 입장에서 개발한거라 조금 꼬여있는 건 있지만,<br> 어느정도 함수나 파일을 구분해둬서 나름(?) 이해하는 데에는 어렵지 않을 것 같다.</p><h2 id="앞으로의-계획" tabindex="-1"><a class="header-anchor" href="#앞으로의-계획"><span>앞으로의 계획</span></a></h2><ol><li>코드에 대한 해석과 생각을 정리하는 포스팅을 작성 <ul><li>내가 왜 이렇게 작성했는지 회고하면서 포스팅을 작성해볼 생각이다.</li></ul></li><li>미흡한 기능을 추가하거나 보완 <ul><li>솔직히 더 생각해둔 기능이 있는데 구현되지 않은 것이 조금 존재한다.<br> (예를 들어 어떤 상태 코드(200, 300, 400, 500)를 갖는지에 따라 모니터링 구분 등)</li></ul></li><li>REST API 기능을 하도록 서비스 GoLang을 이용한 추가 개발 진행</li><li>Vue.js 등의 기능을 이용하여 REST API를 연계하는 Site 개발 진행</li></ol><p><s>(여기에 명시한 것을 바로바로 하고 싶지만 회사 업무 등으로 인해 하하..)</s></p><hr><p>포스팅 끝까지 읽어주셔서 감사드리며 틀린 내용이 있다면 댓글 부탁드립니다. 😎</p>',12),l=[a];function n(p,c){return i(),t("div",null,l)}const u=e(r,[["render",n],["__file","WebSite-Checker-GitHub-Upload.html.vue"]]),m=JSON.parse('{"path":"/posts/Computing/Develop/GoLang/WebSite-Checker-GitHub-Upload.html","title":"[GoLang] WebSite Checker 소스 배포","lang":"ko-KR","frontmatter":{"title":"[GoLang] WebSite Checker 소스 배포","categories":["GoLang"],"tags":["WebSite","Monitor","Checker","Status","ChanceWC"],"date":"2022-08-28T00:00:00.000Z","editLink":false,"lastUpdated":true,"description":"GitHub Repository Core Site 역할 Core Core의 역할은 crontab에 주기를 선택하여 등록하고 각 시점마다 실행되는 역할을 한다. 여기서 사용자의 설정을 인지하고 그 설정에 따라 사이트를 검사하는 사이클을 실행한다. 검사는 비동기로 실행되고 메일 수신자를 확인하여 알람 발생일 경우 메일로...","head":[["meta",{"property":"og:url","content":"https://blog.false.kr/posts/Computing/Develop/GoLang/WebSite-Checker-GitHub-Upload.html"}],["meta",{"property":"og:site_name","content":"찬스의 개발 블로그 : Chance Devlog"}],["meta",{"property":"og:title","content":"[GoLang] WebSite Checker 소스 배포"}],["meta",{"property":"og:description","content":"GitHub Repository Core Site 역할 Core Core의 역할은 crontab에 주기를 선택하여 등록하고 각 시점마다 실행되는 역할을 한다. 여기서 사용자의 설정을 인지하고 그 설정에 따라 사이트를 검사하는 사이클을 실행한다. 검사는 비동기로 실행되고 메일 수신자를 확인하여 알람 발생일 경우 메일로..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-08-14T14:25:16.000Z"}],["meta",{"property":"article:author","content":"Chance"}],["meta",{"property":"article:tag","content":"WebSite"}],["meta",{"property":"article:tag","content":"Monitor"}],["meta",{"property":"article:tag","content":"Checker"}],["meta",{"property":"article:tag","content":"Status"}],["meta",{"property":"article:tag","content":"ChanceWC"}],["meta",{"property":"article:published_time","content":"2022-08-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T14:25:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[GoLang] WebSite Checker 소스 배포\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T14:25:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chance\\",\\"url\\":\\"https://blog.false.kr\\",\\"email\\":\\"chance0432@naver.com\\"}]}"]]},"headers":[{"level":2,"title":"GitHub Repository","slug":"github-repository","link":"#github-repository","children":[]},{"level":2,"title":"역할","slug":"역할","link":"#역할","children":[]},{"level":2,"title":"여담","slug":"여담","link":"#여담","children":[]},{"level":2,"title":"앞으로의 계획","slug":"앞으로의-계획","link":"#앞으로의-계획","children":[]}],"git":{"createdTime":1661670938000,"updatedTime":1723645516000,"contributors":[{"name":"Chance","email":"ahs0432@naver.com","commits":1}]},"readingTime":{"minutes":0.27,"words":81},"filePathRelative":"posts/Computing/Develop/GoLang/WebSite-Checker-GitHub-Upload.md","localizedDate":"2022년 8월 28일","excerpt":"<h2>GitHub Repository</h2>\\n<ul>\\n<li><a href=\\"https://github.com/ahs0432/Chance-WC-Core\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Core</a></li>\\n<li><a href=\\"https://github.com/ahs0432/Chance-WC-Web-GoLang\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Site</a></li>\\n</ul>\\n<h2>역할</h2>\\n<ul>\\n<li>\\n<p>Core</p>\\n<ul>\\n<li>Core의 역할은 crontab에 주기를 선택하여 등록하고 각 시점마다 실행되는 역할을 한다.</li>\\n<li>여기서 사용자의 설정을 인지하고 그 설정에 따라 사이트를 검사하는 사이클을 실행한다.</li>\\n<li>검사는 비동기로 실행되고 메일 수신자를 확인하여 알람 발생일 경우 메일로 발송한다.</li>\\n<li>검사 시간은 Timeout 10초 기준, 약 180개 사이트 검사 시 720초정도 소요됐었다.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Site</p>\\n<ul>\\n<li>Core에서 검사된 데이터를 기반으로 웹 사이트를 표현해주는 역할을 수행하고 있다.</li>\\n<li>GoFiber 프레임워크를 기반으로 제작됐으나 나중에 REST API 형태로 변경할 생각이다.</li>\\n<li>변경한 이후에는 Vue.js 등 요즘 많이 사용하는 프론트엔드 언어로 제작해볼 생각이다.</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,m as data};
